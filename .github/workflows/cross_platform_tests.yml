name: Cross-Platform Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

# Add this section to control notification behavior
defaults:
  run:
    shell: bash

# Explicitly disable all notifications
env:
  GITHUB_ACTIONS_SKIP_NOTIFICATIONS: true
  ACTIONS_STEP_DEBUG: false
  GITHUB_ACTIONS_NOTIFICATIONS: false

jobs:
  build_and_test:
    name: Build and test on Ubuntu with Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue with other jobs if one fails
      matrix:
        python-version: ['3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
      
    - name: Install dependencies for testing
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark
        if [ -f tests/requirements.txt ]; then pip install -r tests/requirements.txt; fi
      
    - name: Install c2pa-python for benchmarking
      run: pip install c2pa-python
      continue-on-error: true  # Continue even if c2pa-python install fails
      
    - name: Create virtual environment
      run: |
        python -m venv .venv
        echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        
    - name: Build and install package with maturin
      uses: PyO3/maturin-action@v1
      with:
        target: x86_64
        command: develop
        args: --release
        sccache: 'true'
      
    - name: Run tests
      run: python run_tests.py
      continue-on-error: true  # Continue even if tests fail to get wheels
      
    - name: Build wheel
      uses: PyO3/maturin-action@v1
      with:
        target: x86_64
        command: build
        args: --release
        sccache: 'true'
        
    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-ubuntu-latest-py${{ matrix.python-version }}
        path: target/wheels/
        
  # Create a release job that collects all wheels
  collect_wheels:
    name: Collect all wheels
    needs: build_and_test
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: wheels
        
    - name: Display wheel files
      run: find wheels -type f -name "*.whl" | sort
      shell: bash
        
    - name: Upload combined wheels
      uses: actions/upload-artifact@v4
      with:
        name: all-wheels
        path: wheels/*/*.whl 